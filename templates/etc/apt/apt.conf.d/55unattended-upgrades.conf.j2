// This file is managed by Ansible, all changes will be lost

// List of blacklisted packages that shouldn't be automatically upgraded
Unattended-Upgrade::Package-Blacklist {
{% if apt_unattended_upgrades_blacklist is defined and apt_unattended_upgrades_blacklist %}
{% for package in apt_unattended_upgrades_blacklist %}
        "{{ package }}";
{% endfor %}
{% endif %}
};

// Split the upgrade into the smallest possible chunks so that
// they can be interrupted with SIGUSR1. This makes the upgrade
// a bit slower but it has the benefit that shutdown while a upgrade
// is running is possible (with a small delay)
{% if apt_unattended_upgrades_minimal_steps is defined and apt_unattended_upgrades_minimal_steps %}
Unattended-Upgrade::MinimalSteps "true";
{% else %}
Unattended-Upgrade::MinimalSteps "false";
{% endif %}

// Send email to this address for problems or packages upgrades
// If empty or unset then no email is sent, make sure that you
// have a working mail setup on your system. A package that provides
// 'mailx' must be installed. E.g. "user@example.com"
Unattended-Upgrade::Mail "{{ apt_mail_notifications | join(",") }}";

// Set this value to "true" to get emails only on errors. Default
// is to always send a mail if Unattended-Upgrade::Mail is set
{% if apt_unattended_upgrades_notify_always is defined and apt_unattended_upgrades_notify_always %}
Unattended-Upgrade::MailOnlyOnError "false";
{% else %}
Unattended-Upgrade::MailOnlyOnError "true";
{% endif %}

// Do automatic removal of new unused dependencies after the upgrade
// (equivalent to apt-get autoremove)
{% if apt_unattended_upgrades_autoremove is defined and apt_unattended_upgrades_autoremove %}
Unattended-Upgrade::Remove-Unused-Dependencies "true";
{% else %}
Unattended-Upgrade::Remove-Unused-Dependencies "false";
{% endif %}

// Automatically reboot *WITHOUT CONFIRMATION* if a
// the file /var/run/reboot-required is found after the upgrade
//Unattended-Upgrade::Automatic-Reboot "false";

// vim:ft=aptconf
